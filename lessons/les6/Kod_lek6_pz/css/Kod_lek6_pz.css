

                             /*Списки*/



/*ul, 
ol
{
	margin: 0;
	padding: 0;*/
   
  /* любой тип можно выставить и ul и ol */
  /*-list-style-type: disc;*/ /* circle, square, none */
	/* символы внтури или снаружи */
	/*(т.е. по умолчанию идет нумерованный список и буллеты как бы встроены
		внутрь этого списка, но когда мы пропишем list-stye-positon: inside
		, тогда булеты становятся на уровень цифр, а не как изначально чуть-чуть
		правее их (как бы внутри))*/
	/*list-style-position: inside;*/
  /* при инсайд - текс 2й строки под маркером */
  /*-width: 30px;*/
/*}*/

/* можно задать всему списку или элементу*/

/*ol > li:last-child {
   list-style-type: square;
}*/



/*Опробуем метод задания буллета для иконки через псевдокласс: before;
Для этого сверстаем список
Итак, у нас есть список из 4-ех лишек, в предпоследней лишке у нас еще один
список. Присваеваем классы обеим спискам (всему нашему списку и вложенному 
в предпоследнюю лишку списку). Первым делом Обращась к этим классам убераем 
все буллеты (list-style:none). Дальше перед всеми лишками задаем абсолютное
позиционирование, а также задаем отступ в право 25px (с помощью margin: -25px)
и в контенте пишем большое тире.Таким образом мы задали отступ от нашей лишки 
до тире этой лишки и теперь наша лише тире и наша ли разделены отступом в 25px.
Дальше обращаемся к лишкам во вложенном списке, задаем перед ними также абс-
олютное позиционирование, задаем размеры нашего буллет-фона-картинки, а также
задаем отступ от нашей лишки до нашего буллета (margin-left: -20px). После 
этого вставляем картинку через backgroud.
  а потом картинку.
  */


/*.test,
.test__inside{
	list-style: none;
}


.test li:before{
position: absolute;
margin-left: -25px;
content: '—';
}

li{
	position: relative;
}

.test__inside li:before{
	position: absolute;
	width: 14px;
	height: 14px;
	top:5px;
	margin-left: -20px;
	background: url(http://lorempixel.com/14/14/) no-repeat;
	content: '';
}


.test1{
	color: red;
}
	
.test1 span{
	color: blue;
}
*/


                        /*Генерируемое содержимое (см.html)*/


.generation:before{
	content: attr(title);
}

/*Т.е. псевдоелемент content возьмет контент из атрибута data-mydata и подставит
его вначало блока. Если же мы, допустим, нашему .generation добавим атрибут
title="hello", то тогда если мы добавим в attr Наш title, тогда вначале нашего
блока будет содержимое title, в данном случае hello.*/



/*Также с помощью cвойства content мы можем вставлять 
не только текст, но и картинки.
В нижнем примере видим, что вначале с помощью сontent мы вставляем букву S,
а в конце картинку.
*/
.lol{
  margin: 40px;
  padding: 20px;
  background: #eef;
}

.lol:before {
  position: absolute;
  width: 20px;
  height: 20px;

  content: 'S';
  margin: -20px 0 0 -20px;
  background: #ef0;
  text-align: center;
}

.lol:after {
  position: absolute;
  content: url(http://lorempixel.com/50/50/);
  margin: 10px 0 0 10px;
  text-align: center;
}

          /* Актуальный пример */

/*Нам нужно, чтобы при нажатие на наш текст в диве, выплывал некий клёвый титл.
Для этого записываем наш титл в дата-атрибуте(с помощью дата-атрибутов можно
передавать какие-то данные, которые не видны на странице изначально), и в цсс
ссылаемся на наш дата атрибут с помощью команды attr, которую прописываем в 
content псевдокласса before. Итак, теперь у нас перед нашим текстом в диве
находится тот контент, который в титле, но т.к. мы хотим, чтобы он всплывал 
при нажатии, нам необходимо перед before прописать ховер. Теперь при нажатии
мы видим как перед нашим контентом из дива добавляется контент из дата-тайтл.
Позиционируем наш контент в before абсолютно относительно body, например, 
и теперь наш контент в before можно позиционировать как угодно относительно
нашего текста в диве, также добавляем еще разные плюшки и получаем приколь-
ный эффект при наведении на наш текст в диве. Следует заметить, что данные
хранятся в html, а не в css и может быть ситуация, когда данные приходят с 
сервера в html, т.е. генерируют наш html (php/java/notjs) и тогда мы не 
всегда контролируем его.  */



body{
  position: relative;
}


.actual:hover:before{
  content:attr(data-title);
  position: absolute;
  top:-10px;
  border: 1px solid #999;
  padding: 5px 10px;
  font-size: 12px;
  background-color: #fee;
}          
/* 
                    Программирование в css

Подключаем шрифт.
@import url(http://fonts.googleapis.com/css?family=Droid+Sans:700);


body {
 counter-reset: pages; 
 Объвляем счетчик с названием pages сразу обнуляя его.
}


a{
  counter-increment: pages; 
Каждой новой ссылке присваивается соответствующий номер счетчика.
Когда счетчик встречает ссылочку "а", то он
делает counter-increment, т.е. увеличивается на один;
}


a::before { 
content: counter(pages);
Здесь элемент before, контент которого прописывает
каждой ссылке "а" соответсвующий номер счетчика.
Например: он находит первую ссылку "а" 
и т.к. это первая ссылка, то и счетчик(page) равен одному, 
а значит первая ссылка будет под номером 1. Если мы добавим вторую ссылку,
то ей присвоится значение counter-increment: pages и т.к. ссылка у нас уже
вторая по счету, то и счетчик (pages) будет равен двум, а значит ссылка будет
иметь номер 2. Т.е. каждой новой ссылке будет присвоено свойство 
counter-increment:pages, где pages является счетчиком, который увеличивается
с каждой новой ссылкой прописывая через content псевдокласса before номер 
каждой новой ссылке в данном случае больший чем номер предыдущей ссылке на 1.

}


body{
  margin: 32px;
  font: 700 32px/1 'Droid Sans', sans-serif;
  color: #fff;
  background-color: #3f4b58;
}

h1 {
  margin: 0 0 32px; Первое значение для верхнего отступа, вторая по бокам, третье - для нижнего.
  font-size: 48px;
} 

h2 {
  margin: 0 0 8px 8px;
  font-size: inherit; Ключевое слово, которое сообщает, что необходимо 
  наследовать значение  свойства у родительского элемента. 
  Естественно, результат будет заметен только в том   случае, 
  если у родителя указанное свойство установлено.
  

}

section {
  margin-bottom: 16px;
  padding: 16px;
  border-radius: 4px;
  overflow: hidden;
  background-color: rgba(255, 255, 255, .1);
}

a {
  float: left;
  width: 32px;
  margin: 8px;
  padding: 8px;
  border-radius: 4px;
  border: solid 2px rgba(255, 255, 255, .4);
  text-decoration: none;
  text-align: center;
  color: #fff;
  background-color: rgba(255, 255, 255, .2);
  transition: all .1s;
}

a:hover {
  border: solid 2px #fff;
  background-color: rgba(255, 255, 255, .4);
  box-shadow: 0 0 10px #fff;
}
 */

 /*Еще пример по программированию в css*/

/*Итак, есть section в которых находятся box. И section и boxы внутри 
sections номеруются. Рассмотрим конкретнее.
В отличии от предыдущего примера, в этом примере у нас уже два счетчика
(sections и boxes) т.к. нам нужно считать и section и входящие в них box.
В body задам два этих счетчика (sections и boxes) сразу обнулив. В следующей
команде мы говорим, что каждому section будет присвоено значения(номер) 
счетчика, а в следующей команде каждому section будет прописан через content
псевдокласса before слово 'section ' и номер этого section (т.е. номер счет
чика из предыдущей команды). То же самое делаем и для box c той лишь разницей,
что в .box::before (разумней ставить две точки перед псевдоелементами тем самым
отличая их от псевдокласса.(псевдоелемент - работай с частью контента тега,
а псведокласс с состоянием контента)) нету никакого контента, только лишь
значение счетчика, но римскими буквами (upper-roman). 
Также можно сделать нумерацию box не сквозную (в каждой секции нумерация box
не будет продолжаться), а такую, чтобы в каждой секции она начиналась сначала.
Для этого нужно просто, чтобы в каждом section шло обнуления счетчика boxов 
т.е. пропишем в section counter-reset: boxes и теперь каждому найденному 
section будет  присваиватся номер соответсвующий номер счетчика (больший на 
единица за тот section, который был найдем до этого section) и второй командой
будет задано обнуление счетчика boxes (в каждой новой section). Так в каждой
section boxы будет отсчитываться от еденицы.*/




/* @import url(http://fonts.googleapis.com/css?family=Droid+Sans:700);



body {
  counter-reset: sections boxes;
}

section {
  counter-increment: sections;
  counter-reset: boxes;
}

section::before {
  content: 'Section ' counter(sections);
}

.box {
  counter-increment: boxes;
}

.box::before {
  content: counter(boxes, upper-roman);
}



body {
  margin: 32px;
  font: 700 32px/1 'Droid Sans', sans-serif;
  color: #fff;
  background-color: #473f58;
}

h1 {
  margin: 0 0 32px;
  font-size: 48px;
}

section {
  margin-bottom: 16px;
  padding: 16px;
  border-radius: 4px;
  overflow: hidden;
  background-color: rgba(255, 255, 255, .1);
}

section::before {
  display: block;
  margin: 0 0 8px 8px;
}

.box {
  float: left;
  width: 96px;
  height: 64px;
  margin: 8px;
  border-radius: 4px;
  line-height: 64px;
  text-align: center;
  font-size: 28px;
  background-color: rgba(255, 255, 255, .2);  
}

*/

                            /*Еще один примерчик*/

/*Итак, в первом section у нас имеются inputы и при чеке этих инпутов во
втором section нам показывается количество чекнутых инпутов. 
Таким образом эта задача решается по обычному алгоритму: в боди 
объявляем счетчик (characters) сразу обнуляя его, потом каждому инпуту, 
который чекнут присваиваем номер счетчика, который увеличивается с 
каждым новым инпутом и потом классу .total sectionа, который лежит в 
самом низу через content псевдоелемента after выводим этой самый счетчик, 
который считает количество чекнутых чекбоксов.
*/


/*@import url(http://fonts.googleapis.com/css?family=Droid+Sans:700);

body {
  counter-reset: characters;
}

input:checked {
  counter-increment: characters;
}

.total::after {
  content: counter(characters);
}


body {
  margin: 32px;
  font: 700 32px/1 'Droid Sans', sans-serif;
  color: #fff;
  background-color: #3f584e;
}

h1 {
  margin: 0 0 32px;
  font-size: 48px;
}

h2 {
  margin: 0 0 8px 8px;
  font-size: inherit;
}

section {
  margin-bottom: 16px;
  padding: 16px;
  border-radius: 4px;
  overflow: hidden;
  background-color: rgba(255, 255, 255, .1);
}

input {
  position: absolute;
  left: -100px;
}

label {
  float: left;
  margin: 8px;
  padding: 16px;
  border-radius: 4px;
  border: solid 2px rgba(255, 255, 255, .4);
  background-color: rgba(255, 255, 255, .2);
  cursor: pointer;
  transition: all .1s;
}

label::before {
  display: inline;
}

input:checked + label {
  border: solid 2px #fff;
  background-color: rgba(255, 255, 255, .4);
  box-shadow: 0 0 10px #fff;
}

  .total {
  padding: 16px 24px;
}*/

/*Игра в css*/

/*При чеке на какой-то из чекбоксов происходит НЕ присвоение инпуту номера
соответсвующего счетчика, который больше на один чем предыдущий инпут, 
а сразу  присвоение определенному инпуту через idшник инкремента в какое-то
число (64 или 16 или -32 или 128 или 4 или -8) и потом в конце, в span.sum
через контент псевдоелемента before после = выводится счетчик sum в виде суммы
счетчиков (заинкременченых в какие числа) тех инпутов, которые нажаты.
Игра это потому, что предусмотрен правильный ответ. В конце цсса этого задания
идет как бы условие, которое реализовано через родительский селектор тильда,
который предусматривает 2 условия 1)обращение к елементу, которые стоит сразу после того
елемента от которого исходит обращение 2)также эти 2 елемента должны иметь 
общего родителя. Таким образом каждый елемент обращается к стоящему за ним 
елементу через родительский селектор тильда при этом все эти елементы имеют
общего родителя. Последний елемент (span) в свою очередь через content
псевдоелемента after прописывает "ура". Нужно также подчеркнуть, что таким 
образом можно реализовать условие в css.

*/



/*@import url(http://fonts.googleapis.com/css?family=Droid+Sans:700);

body {
  counter-reset: sum;
  
  -counter-reset: sum 41; 
}

#a:checked { counter-increment: sum 64; }
#b:checked { counter-increment: sum 16; }
#c:checked { counter-increment: sum -32; }
#d:checked { counter-increment: sum 128; }
#e:checked { counter-increment: sum 4; }
#f:checked { counter-increment: sum -8; }

.sum::before {
  content: '= ' counter(sum);
}


body {
  margin: 32px;
  font: 700 32px/1 'Droid Sans', sans-serif;
  color: #fff;
  background-color: #583f3f;
}

h1 {
  margin: 0 0 32px;
  font-size: 48px;
}

h2 {
  margin: 0 0 8px 8px;
  font-size: inherit;
}

section {
  margin-bottom: 16px;
  padding: 16px;
  border-radius: 4px;
  overflow: hidden;
  background-color: rgba(255, 255, 255, .1);
}

input {
  position: absolute;
  left: -9999px;
}

label {
  float: left;
  margin: 8px;
  padding: 16px;
  border-radius: 4px;
  border: solid 2px rgba(255, 255, 255, .4);
  background-color: rgba(255, 255, 255, .2);
  cursor: pointer;
  transition: all .1s;
}

label::before {
  display: inline;
}

input:checked + label {
  border: solid 2px #fff;
  background-color: rgba(255, 255, 255, .4);
  box-shadow: 0 0 10px #fff;
}

span {
  float: left;
  margin: 8px;
  padding: 18px;
  border-radius: 4px;
  background-color: rgba(0, 0, 0, .1);
}

#a:checked ~ #b:checked ~ #c:not(:checked) ~ 
#d:not(:checked) ~ #e:not(:checked) ~ #f:checked ~ .sum::after {
  content: ' (hooray!)';
}
*/


                                  /*layout*/

/*layout c помощью inline-block */

/*У нас есть трёхколоночный макет: в div.container у нас 3 колонки left,
center,right.
В таких случая елементу в котором находятся наши колонки (в нашем случае это
container) нужно а)задавать минимальную ширину (min-widh). Данная команда 
устанавливает минимальную ширину элемента и если окно браузера по ширине 
становится меньше заданной минимальной ширины элемента, то ширина элемента
остается неизменной, а в окне появляется горизонтальная полоса прокрутки.
Т.е. если мы это отключим, то скролл пропадет и при уменьшении окна браузера
элементы будут налазить друг на друга.
б)Задать свойство white-space (Свойство white-space устанавливает, как
отображать пробелы между словами.) в значении nowrpap (Пробелы не учитываются, 
переносы строк в коде HTML игнорируются, весь текст отображается одной 
строкой; вместе с тем, добавление тега <br> переносит текст на новую строку.)
Как известно когда строчным или строчно-блочным элементам не хватает места,то
они перескакивают на другую строку, данное свойство не дает им сделать это.
Cтоит заметить, что все свойства, которые относятся к шрифту наследуются.
Это же касатается white-space, потому дальше, когда нам уже не будет нужен
эффект от данного свойства мы должны вернуть его в нормал (white-space:normal)
Также уже для колонок мы применяем цсс свойство vertical-align(Выравнивает
элемент по вертикали относительно своего родителя, окружающего текста или
 ячейки таблицы.) в значении top (Выравнивание верхнего края элемента по 
 верху самого высокого элемента строки.). Ну и чтобы получить тот самый 
 трёхколоночный макет указываем для каждой колонки ширину.
 




*/

/*body {
  font-size: 29px;
}

.container {

  
  min-width: 700px;
  white-space: nowrap;
}

.left,
.center,
.right {
  display: inline-block;
  
  white-space: normal;
  vertical-align: top;
}

.left {
  width: 16%;

  
  margin-left: 2%;
}

.center {
  width: 56%;
}

.right {
  width: 24%;
  margin-right: 2%;
}*/


/*layout c помощью float*/

/*Тут нету ничего нового. Зачистку границ можно еще сделать с помощью
overflow:hidden.*/

/*body {
  font-size: 29px;
}

.container {
  min-width: 900px;
  background: red;
}

.container:after {
  clear: both;
  display: block;
  content: '';
}

.left,
.center,
.right {
  float: left;
}

.left {
  width: 16%;
  margin-left: 2%;
}

.center {
  width: 56%;
}

.right {
  width: 24%;
  margin-right: 2%;
}*/


/*layout c помощью absolute*/


/*Не частый вариант layout.Позиционируем все     колонки относительно контейнера,
в который они все входят.Фишка в том, что центральная колонка не имеет 
свойства position:absolute ибо если все элементы будут абсолютно спозициони-
рованны, тогда все элементы выбиваются из потока и container не знает какую
высоту делать, а когда средний елемент будет обычным (не абсолют), тогда по
нему container и выставит высоту для двух боковый абсолютно спозиционированных
колонок. Также центральной колонке задан интересный padding: слева он 18%
ровно столько, сколько и ширина левой колонки вместе с левым margin этой самой
левой колонки. Также происходит с правой колонкой:правый padding 26% ровно как
и ширина правой колонки вместе с правым margin. Также нужно понимать, что если
контента в центральной колонке будет меньше чем в боковой, то контент в боковой
вылезет. Из этого следует, что такое вариант layout нужно использовать только
тогда, когда у нас большая средняя колонка. Также центральной колонке задан
min-height для того, чтобы если в центральной колонке не будет текста, то 
структура сохранялась бы и также нужно ставить min-height такой, чтобы 
контент боковых колонок не был больше этого min-height заданного центральной 
колонке и текст из этих самых боковый колонок не выперал за приделы этой высо-
ты.*/

/*body {
  font-size: 29px;
}

.container {
  position: relative;
  min-width: 900px;
  background: red;
}

.left {
  position: absolute;
  left: 0;
  top: 0;
  width: 16%;
  margin-left: 2%;
}

.center{  
  min-height: 5em;
  padding: 0 26% 0 18%;
}

.right {
  position: absolute;
  right: 0;
  top: 0;
  width: 24%;
  margin-right: 2%;
}
*/

/*Интересный вариант многоколоночного макета с применением absolute*/

/*Этот вариант многоколоночного макета сделан на основе свойств postion:absolute.
Изначально для через body задана высота в 100% т.е. макет будет растягиваться
на 100% высоты экрана. Дальше container, а также в нем находящимся колонкам
задано абсолютное позиционирование. Всем координатам контейнера заданы нулевые
координаты, чтобы растянуть его на весь экран по всем направлениям. Дальше
левой колонке задан отступ справа в 75%, таким образом ей остается 25%.
Потом верхней центральной и нижней центральной заданы отступы слева в 25% и
отступ от низу 50% (верхней центральной), и отступ слева в 25% и отступ от 
верхна 50% (нижней центральной.). Таким образом, получен с помощью свойств
расстягивания position:absolut интересный вариант 3-колоночного макета.
Кстати, такой layout еще и классно резиниться.*/


/*html,
body {
  font-size: 29px;
  height: 100%;
}

.container {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}

.left {
  position: absolute;
  left: 0;
  top: 0;
  bottom: 0;
  right: 75%;
  padding: 20px;
  background: #ccc;
}

.top-center {
  position: absolute;
  left: 25%;
  top: 0;
  bottom: 50%;
  right: 0;
  padding: 20px;
  background: yellow;
}

.bottom-center {
  position: absolute;
  left: 25%;
  top: 50%;
  bottom: 0;
  right: 0;
  padding: 20px;
  background: red;
}*/

/*layout с помощью flexbox*/
  
  .grid {
  display: flex;
}
.col {
  background: #ccc;
  padding: 30px;
}
.fluid1 {
  flex: 1;
}
.fixed {
  background: red;
  width: 200px;
}
.fluid2 {
  flex: 3;
} 