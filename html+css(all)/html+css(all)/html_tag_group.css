/*Свойства для слов и строк*/

white-space: normal | nowrap | pre | pre-line | pre-wrap | inherit;
word-break:  normal | break-all | keep-all;
hyphens: none | manual | auto;

word-spacing: <размер> | normal | inherit;
letter-spacing: значение | normal | inherit;

writing-mode: lr-tb | rl-tb | tb-rl | bt-rl | tb-lr | bt-lr; tb(top_bottom);

dir={ltr | rtl} (attr);
direction: ltr | rtl | inherit;

unicode-bidi: normal | embed | bidi-override | inherit; /*embed и bidi-override для direction;*/

/*Other*/

all: initial | inherit | unset; /*сбрасываем все значения свойств в исходные или наследуемые*/
initial /*первоначальное(исходное) значение свойства*/
inherit /*наследование значение свойства у родителя*/
unset /*применяет inherit, если свойство наследуется, в противнов случае применяет initial;*/
user-select: auto | none | text | all | contain; /*Управляет поведением выделения текста*/ 

/*2 aligns txt: vertical(vertical-align)/horizontal(text-align)*/

vertical-align: значения | проценты |bottom,middle,sub,super(sup),top и т.д.;
Для ячеек таблицы по вертикали : vertical-align:top,bottom,middle,baseline(ст);

text-align: center | justify | left | right | start | end;
text-align-last: start | end | left | right | center | justify; 

/*Transparency in css*/

visibility: visible | hidden | collapse | inherit; /*(Убирает елемент, но оставляет место под него);*/
opacity: (0 - полная прозрачность, а 1=default) 0.6 = .6;
filter: opacity; /*(100% - 0% либо 0-1 при 0=полная прозрачность, а 1/100%=default);*/
display: none; /*(Уберает элемент и место под него);*/

/*Table css*/

Свойства display для таблицы: 

display: inline-table;

display: table; 
display: table-caption; 

display: table-cell; (td или th )
display: table-row;  (tr)

display: table-header-group; (thead) 1
display: table-footer-group; (tfoot) 2
display: table-row-group; (tbody) 3

display: table-column; (col)
display: table-column-group; (сolgroup)

Другие свойства

empty-cells: show | hide;

caption-side: top | bottom | left | right;	

table-layout: auto | fixed | inherit;

border-collapse: collapse | separate | inherit;
border-spacing: значение1 [значение2];

/*Свойства с префиксом с -text*/

text-decoration: blink | line-through | overline | underline | none | inherit;

text-decoration-color: <цвет>; /*цвет линии установленной через text-decoration*/
text-decoration-line: line-through || overline || underline  | none;
text-decoration-style: solid | double | dotted | dashed | wavy;

text-indent: <значение> | <проценты> | inherit; /*отступа первой строки блока текста (например, для абзаца <p>).*/

text-transform: capitalize(первая буква большая) | lowercase | uppercase | none | inherit;

overflow: auto | hidden | scroll | visible | inherit;
text-overflow: clip | ellipsis; (Работает только при включенном overflow)
overflow-x: auto | hidden | scroll | visible;
overflow-y: auto | hidden | scroll | visible;

resize: none | both | horizontal | vertical | inherit; /*Указывает, можно ли пользователю изменять размеры текстового поля.*/

object-fit: fill | contain | cover | none;/*Управляет соотношением сторон заменяемых элементов, таких как <img>
 																					и <video>, когда у них задана ширина или высота, а также способом масштабирования. Свойство object-fit может
 																					сохранять исходные пропорции элемента или наоборот, искажать пропорции, в угоду соблюдения размеров.*/

image-rendering: auto | crisp-edges | pixelated; /*Сообщает браузеру, каким алгоритмом интерполировать изображение
																								 при масштабировании его размеров или изменении масштаба в параметрах 
																								 браузера.*/


text-shadow: <сдвиг по x>(обяз.) <сдвиг по y>(обяз.) <радиус размытия>(необяз.) <цвет>((необяз.);
box-shadow: inset(тень внутрь) <сдвиг по x> <сдвиг по y> <радиус размытия> <растяжение> <цвет>;

/*В отличие от свойства box-shadow во внимание принимаются прозрачные 
участки в изображении и тень отбрасывается с их учётом.
При пустом значении все параметры воспринимается как 0. 
Цвет тени по умолчанию такой же, как значение свойства color.*/
filter: drop-shadow(<сдвиг по x> <сдвиг по y> <радиус размытия> <цвет>);

/*Внешние границы*/

outline: outline-color || outline-style || outline-width | inherit;	

outline-color: invert(цвет линии задается под фон) | цвет | inherit;
outline-style: none | dotted | dashed | solid | double | groove | ridge | inset | outset | inherit;
outline-width: thin | medium | thick | значение | inherit;

outline-offset: <размер> | inherit;/*расстояние между рамкой, созданной с помощью свойства outline, и краем или границей элемента*/

/******************************************************************************/

border: border-width | border-style | border-color;

border-top: border-width | border-style | border-color;
border-bottom: border-width | border-style | border-color;
border-right: border-width | border-style | border-color;
border-left: border-width | border-style | border-color;

border-color: цвет | transparent;

border-top-color: цвет | transparent;
border-bottom-color: цвет | transparent;
border-right-color: цвет | transparent;
border-left-color: цвет | transparent;

border-style: (куча разных рамок);

border-top-style: none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset; 
border-bottom-style: none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset; 
border-right-style: none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset; 
border-left-style: none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset; 

border-width: [значение | thin | medium | thick] {1,4} | inherit;

border-top-width: значение | thin | medium | thick;
border-bottom-width: значение | thin | medium | thick;
border-right-width: значение | thin | medium | thick;
border-left-width: значение | thin | medium | thick;

border-radius: <радиус>  / <радиус>;

border-top-left-radius: [значение | проценты] / [значение | проценты];
border-top-right-radius: [значение | проценты] / [значение | проценты];
border-bottom-left-radius: [значение | проценты] / [значение | проценты];
border-bottom-right-radius: [значение | проценты] / [значение | проценты];


border-image: none | <URL> <число> | <проценты>/ <толщина> && stretch | repeat | round;


max-height: значение | проценты | none | inherit;
min-height: значение | проценты | inherit;

max-width: значение | проценты | none | inherit;
min-width: значение | проценты | inherit;


/*Свойства для списка(list)*/

display: list-item; 

list-style: list-style-type || list-style-position || list-style-image | inherit;

list-style-image: none | url('путь к файлу') | inherit;
list-style-position: inside | outside;
list-style-type: circle | disc | square...;	

/*Все что связано с font*/

font: [font-style||font-variant||font-weight] font-size [/line-height] font-family;
Обязательно задавать: размер и семейство, остальные не обязательны.

font-style: normal | italic | oblique | inherit;
font-variant: normal | small-caps | inherit;	
font-weight: bold|bolder|lighter|normal|100|200|300|400|500|600|700|800|900;
font-family: имя шрифта, serif, sans-serif, cursive, fantasy, monospace;
font-size: абсолютный размер | относительный размер | значение | проценты;
font-kerning: auto | normal | none;
font-stretch: condensed(ultra/extra/semi) normal expanded(ultra/extra/semi);

@font-face {Свойства шрифта}
/*Example: @font-face{
	font-family: Pompadur;
	src: url(/example/font/pompadur.ttf);	
}
p{
	font-family: Pompadur
}*/

line-height: множитель | значение | проценты | normal(по умолч.(reasonable));

Множитель - это значение-число, которое интерпретируется как множитель
						относительно размера шрифта. 
 Например: значение с множителем line-height: 2 при font-size: 16px 
 будет аналогично line-height: 32px (=16px*2).
 Значение, заданное множителем, наследуется и применяется в каждом элементе
 относительно его размера шрифта. Т.е. при line-height: 2, высота строки будет
 равна удвоенному размеру шрифта и не важно какой это шрифт.

Значение - это значение заданное в единицах измерения, запоминается и
наследуется "как есть".
Это означает, что line-height: 32px будет ВСЕГДА 32px, даже если шрифт
изменится, высота строки (32px) такой и останется т.е. фиксируется.




/*Position/float*/

float: left | right | none | inherit;
clear: none | left | right | both | inherit;

position: absolute | fixed | relative | static | inherit;
z-index: число | auto | inherit;
clip: rect(Y1, X1, Y2, X2) | auto | inherit;

box-sizing: content-box | border-box | padding-box | inherit;

/*Многоколоночный текст*/

columns: [column-width] || [column-count];

column-width: <значение> | auto;
column-count: <число> | auto;
column-gap: <значение> | normal;

column-rule: column-rule-width || column-rule-style || column-rule-color;

column-rule-width: <размер> | thin | medium | thick;
column-rule-style: none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset;
column-rule-color: <цвет>;

column-span: none | all; /*Определяет, как должен отображаться элемент в многоколоночном тексте — занимать ширину всех колонок или только одну из них.*/
column-fill: auto | balance | balance-all; /*Определяет, как контент должен распределяться внутри колонок.*/
/*********************************************************************/

content: строка | attr(параметр) | open-quote | close-quote | url | counter | normal | none | inherit;


/*Счетчики css*/

counter-increment: none | inherit | идентификатор | целое число;
counter-reset: none | inherit | идентификатор | целое число;

/*фон*/

background: background-attachment | background-color | background-image 
| background-position | background-repeat] | inherit;
	
background-attachment: fixed | scroll | local;
background-image: url(путь к файлу) | none;
background-position: left | center | right | <проценты> | <значение>] | 
                     [top | center | bottom | <проценты> | <значение>];
background-repeat: no-repeat | repeat | repeat-x | repeat-y;
background-color: <цвет> | transparent                     	


background-clip: padding-box | border-box | content-box;
background-origin: padding-box | border-box | content-box;
background-size: <значение> | <проценты> | auto  | cover | contain; /*Масштабирует фоновое изображение согласно заданным размерам.*/

cursor: url('путь к курсору1'), url('путь к курсору2'), ..., <ключевое слово(pointer)>


/*display*/

display: block;
display: flex;
display: list-item;
display: table;

display: inline;
display: inline-block;
display: inline-table;
display: inline-flex;

display: run-in;
display: none;

display: table-caption; 

display: table-cell; (td или th )
display: table-row;  (tr)

display: table-header-group; (thead) 1
display: table-footer-group; (tfoot) 2
display: table-row-group; (tbody) 3

display: table-column; (col)
display: table-column-group; (сolgroup)


																		/*flexbox*/

display: flex;
display: inline-flex;

/************************************************************************/

flex-flow: flex-direction | flex-wrap;

flex-direction: row | row-reverse | column | column-reverse;
direction: ltr | rtl;
dir={ltr | rtl} (attr);

flex-wrap: nowrap | wrap | wrap-reverse;

/***********************************************************************/

justify-content: flex-start | flex-end | center | space-between | space-around; /*Выравнивает строки на главной оси*/
align-content: flex-start | flex-end | center | space-between | space-around | stretch; /*Выравнивает строки только на поперечной оси*/


align-items: flex-start | flex-end | center | baseline | stretch;
align-self: auto | flex-start | flex-end | center | baseline | stretch;

text-align: center | justify | left | right | start | end; /*Аналог*/
vertical-align: значения | проценты |bottom,middle,sub,super(sup),top и т.д.; /*Аналог*/

/***********************************************************************/

order: <число>;

/***************************************************************************/

flex: none | <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> /*Второй и третий параметр необязательны*/

flex-grow: <number> (по умолчанию 0);
flex-shrink: <number> (default 1); /*Отрицательные числа не принимаются.*/
flex-basis: auto(умолч.) | <ширина>;

/*Анимация*/

animation: animation-name: none, animation-duration: 0s,
					 animation-timing-function: ease, animation-delay: 0s,
					 animation-iteration-count: 1, animation-direction: normal,	
					 animation-fill-mode: none, animation-play-state: running;

animation-duration: <время> [,<время>]*;					 
animation-delay: <время> [,<время>]*;
animation-direction: normal | alternate | reverse | alternate-reverse;
animation-iteration-count: infinite | <число>;
animation-fill-mode: none | forwards | backwards | both;/*Определяет, какие стили должны применяться к элементу, когда анимация не проигрывается.*/
animation-name: none | <идентификатор> [, none | <идентификатор>]*;
animation-play-state: running | paused;/*Свойство определяет, проигрывать анимацию или поставить её на паузу. */
animation-timing-function: ease | ease-in | ease-out | ease-in-out | linear | 
     step-start | step-end | steps | cubic-bezier;					

@keyframes <переменная>  [ from | to | <проценты> ];
ГДЕ: 
<переменная> это имя самой анимации, которое связывает @keyframes c 
animation;
 from это первый ключевой кадр, аналогичен 0%;
 to это последний ключевой кадр, аналогочен 100%;
<проценты> устанавливает ключевой кадр в процентах от времени всей анимации.

/*Example: 

@keyframes: box{
	from { left:0; }
	to { left: 300px; }
}

@keyframes: box{
	50% { left: 0; }
	90% { left: 300px; }
}	

Где box это переменная то бишь имя нашей анимации;*/


																			/*Трансформация*/     

transform: <функция> [<функция>]* | none;

transform: matrix(a, b, c, d, tx, ty); /*Двухмерная матрица*/

transform: rotateX(30deg) | rotateY(30deg) | rotateZ(30deg) | rotate3d; /*Поворот*/
transform: scaleX | scaleY | scaleZ | scale3d; /*Масштаб*/
transform: skewX | skewY;  /*Наклон*/
transform: translateX | translateY | translateZ | translate3d; /*Перемещение*/
transform: perspective;	/*Для отдельных элементов*/

perspective: none | <размер>; /*Применяется к родительскому элементу*/
perspective-origin: <проценты> | <размер> | left | center | right | top | bottom

transform-origin: <x> <y> <z>; /*Устанавливает координаты точки, относительно которой будет происходить трансформация элемента.*/
transform-style: flat | preserve-3d;

backface-visibility: visible | hidden;

/*Транзишин*/

transition: none | <transition-property> ] || <transition-duration> ||   
   <transition-timing-function> || <transition-delay> /*default: all 0s ease 0s*/

transition-delay: <время>;
transition-duration: <время>;
transition-property: none | all | <свойство>;
transition-timing-function: ease | ease-in | ease-out | ease-in-out | linear|
     step-start | step-end | steps | cubic-bezier;


/*Фильтры*/

filter: <фильтр> | none;


/*0 = оставляет изображение неизменным;
 100% or 1 делает объект: черно-белым/сипией/инвертирует(негатив);
 Т.е. меньше 100% or 1 изменяет цветность/сипию/негатив объект (100% - 0% либо 0-1);
 Отрицательное значение не допускается. Пустое значение воспринимается как 0.*/
filter: grayscale();
filter: sepia();
filter: invert();
/*
100% or 1 оставляет изображение неизменным;
0% or 0 делает объект: черно-белым /серым /черным/прозрачным;
Т.е. больше 100% or 1 делает изображение более насыщенным/контрастным/светлым;
а меньше 100% or 1 делает изображение менее насыщенным/контрастным/светлым;
Отрицательное значение не допускается. Пустое значение воспринимается как 1.*/

filter: saturate();
filter: contrast();
filter: brightness();
filter: opacity; /*(100% - 0% либо 0-1 при 0=полная прозрачность, а 1/100%=default);*/

/*Размытие изображения/фоновых картинок/текста
Отрицательное значение не допускается. Пустое значение воспринимается как 0px.*/
filter: blur();

/*В отличие от свойства box-shadow во внимание принимаются прозрачные 
участки в изображении и тень отбрасывается с их учётом.
При пустом значении все параметры воспринимается как 0. 
Цвет тени по умолчанию такой же, как значение свойства color.*/
filter: drop-shadow(<сдвиг по x> <сдвиг по y> <радиус размытия> <цвет>);

/*В значение ставится угол, который задает поворот оттенка на цветовом круге;
При 0 or 360 = ничего не меняется;
Любые значения больше или меньше нуля производят сдвиг цвета в изображении;
Пустое значение воспринимается как 0deg;*/
filter: hue-rotate(<угол>);

																		/*Медиа запросы*/

@media + тип носителя (all/print/screen/speech);
       + лог.операторы (and(И) ,(ИЛИ) not(НЕ, берется во внимание последним));
       + медиа-ф-ции (задают тех.характ. устройства, на котором отображается объект);

Медиа-функции: 

Тип носителя: print,screen
Значение: целое число

aspect-ratio(min/max-aspect-ratio); /*Соотношение ширины/высоты отображаемой области устройства*/
device-aspect-ratio(min/max-devise-aspect-ratio) /*Соотношение сторон экрана устройства*/

device-height(min/max-device-height) /*Определяет всю доступную высоту ЭКРАНА устройства или печатной страницы*/
device-width(min/max-device-width) /*Определяет всю доступную ширину ЭКРАНА устройства или печатной страницы*/

height(min|max-height ) /*Высота отображаемой ОБЛАСТИ*/
width(min|max-width) /*Ширина отображаемой ОБЛАСТИ*/

color(min-color, max-color); /*Число бит на канал цвета*/
color-index(min|max-color-index); /*К-ство цветов,которое поддерживает устройство*/
monochrome(min/max-monochrome);

grid; /*определяет, что это устройство с фиксированным размером символов*/

orientation:landscape(ширина больше высоты)|portrait(ширина меньше высоты);

resolution (min|max resolution) /*Разрешение в dpi/dpcm(точек на дюйм/на сантиметр)*/
scan (interlace(чересстрочная развертка|progressive(прогрессивная развертка)); /*Тип носителя: tv*/


											/*@-правила(те, с которыми встречался)*/

@charset "кодировка"; (Кодировка внешнего CSS-файла);

@import (Импорт содержимого любого css-файла в текущую стилевую таблицу);
/*Синтаксис*/
@import url("имя файла") [типы носителей];
@import "имя файла" [типы носителей];

@font-face{Свойства шрифтов} (Настройки шрифтов/загрузка специфичных шрифтов на комп);

@keyframes <переменная> {  from{} | to{} | <проценты> }/*Устанавливает ключевые кадры при анимации элемента);*/

@media (указывает тип носителя, для которого будет применяться стиль);
Также можно подключать ссылки с атрибутом media для разных устройств;

@page :left | :right | :first { Значения отступов }/*(задание значений полей при печати документа);*/


										/*Универсальные атрибуты(те, с которыми встречался*/

contenteditable: true(или contenteditable="") | false /*Сообщает, что элемент доступен для редактирования пользователем*/ 											
contextmenu="<идентификатор>" /*В качестве значения указывается идентификатор меню, созданное с помощью элемента <menu>.*/

data- /*Создание своих атрибутов, данные с которых получается либо через attr() либо через js*/
dir=ltr | rtl /*Задаёт направление и отображение текста — слева направо или справа налево.*/
hidden="hidden" | hidden="" | hidden /*Скрывает содержимое элемента от просмотра*/
lang="Код языка(en/de/fr)" /*Указывает язык, на котором написан текст внутри текущего элемента */
spellcheck="true(spellcheck=""| spellcheck) | false" /*Указывает браузеру проверять или нет правописание и грамматику в тексте.
																										   результат будет виден только для <input> и <textarea, а также для элементов у которых установлен contenteditable*/
style="<правила описания стилей>"	/*Стили разделяются между собой точкой с запятой*/
title="текст"  /*Описывает содержимое элемента в виде всплывающей подсказки.*/

									/*Функции(те, с которыми встречался)*/

attr() Добавляет значение атрибута HTML-элемента в стилевое свойство.

calc(<выражение>) задает значение основанное на вычислении из одного ЗНАЧЕНИЯ другого.
									В качестве значений могут быть: размер|угол|время|число;
									Например: width: calc(100% - 20px); /*Знаки + и - должны перед/после себя иметь пробелы*/
									Если значение не может быть вычислено - оно игнорируется.

/*Линейный градиент*/
background|background-image: linear-gradient(<угол> | to(!) <позиция>, <цвет>, <цвет>);
/*Бесконечно повторяющийся градиент: после последнего сразу же идет первый;*/
background|background-image: repeating-linear-gradient(<угол> | to <позиция>, <цвет>, <цвет>); 

/*Радиальный градиент*/

background|background-image: radial-gradient(форма <размер> <радиус> <позиция>, цвет, цвет);
/*Бесконечно повторяющийся градиент:Цвета градиента бесконечно повторяются 
  во всех направлениях, образуя узор, заполняющий фон элемента;*/
background|background-image: repeating-radial-gradient(форма <размер> <радиус> <позиция>, цвет, цвет);

ГДЕ:
форма: elipsis(def)|circle;
<размер>: closest-side|closest-corner|farthest-side|farthest-corner;
<радиус>: одно значение - радиус круга, если два - радиус эллипса по х и по у;
/*Если же радиус не указан, тогда градиент будет заполнять собой весь фон;*/
<позиция>: точка, откуда исходит градиент т.е. начальная точка. Задается с помощью at(!);
/*Указывается аналогично background-position, т.е. либо ключевое слово либо px/%/и.т.д.;*/
<цвет>: цвет, за которым может идти его позиция в % от 0% до 100% или в др. единицх;

																					/*Размер*/

/*Абсолютные единицы:*/

px - базовая, абсолютная и окончательная единица измерения. Пиксели могут
быть дробными (16.5px). Все значения браузер в итоге пересчитает в пиксели,
поэтому нету смысла в mm/cm/pt/pc.

/*Относительные:*/

em - 1em это текущий размер шрифта. При этом можно брать любые пропорции от 
     текущего шрифта: 2em, 0.5em и т.п. Изначально 1em равен размеру
      шрифта, заданного в браузере по умолчанию или размеру шрифта 
      родительского элемента. 
      1em = 100%	

%  - как и em это относительные единицы. Как правило, процент будет от
 значения свойства 	родителя с тем же названием, но не всегда.
 Примеры-исключения, в которых % берется не так:
 - При установки свойства margin-left в %, процент берется от ширины
	родительского блока, а нет от margin left родильского блока.
 - При установки line-height в %, процент берется от текущего размера шрифта,
	а не от line-height родителя.
 - При position-fixed, % берется от ширины/высоты окна, а не родителя.

rem - задает размер относительно шрифта элемента <html>. 
Разница между em и rem следующая. em зависит от размера шрифта родителя
элемента и меняется вместе с ним, а rem привязан к корневому элементу, т. е.
размеру шрифта заданного для элемента html.

 /*Единицы относительно экрана*/

vw - 1% от ширины окна;
vh - 1% от высоты окна;
vmin - 1% от меньшего значения из ширины и высоты области просмотра;
vmax - Определяется, что больше, значение ширины или высоты области просмотра и от него вычисляется 1%;

/*Эти единицы были созданы, в первую очередь, для поддержки мобильных устройств
Их основное преимущество в том, что любые размеры, которые в них заданы,
автоматически масштабируются при измении размеров окна.
*/

															/*Псевдоклассы */

:active{}
:hover{}															

:visited{}
:link{}  /*Не посещенные ссылки*/

:empty{}

:lang(){}

:first-child{}
:last-child{}
:only-child{};

:first-of-type{}
:last-of-type{}
:only-of-type{}

:nth-of-type{}
:nth-last-of-type{}

:nth-child (odd(нечетные) | even(четные) | <число> | <выражение(an+b)>) {...} 
:nth-last-child{} /*отчет ведется от последнего элемента, а не от первого, как выше, все свойства те же*/

:fullscreen{}

:not{}

:root{}

:target{}

/*Применяется вместе с формами:*/

:read-write{}
:read-only{} Применяется к полям формы, у которых задан атрибут readonly;

:in-range{}
:out-of-range{}

:default{}

:optional{}
:required{} 

:disabled{}
:enabled{}

:invalid{}
:valid{}

:checked{}

																	/*Псевдоэлементы*/
::after{}
::before{}

::first-letter{}
::first-line{}

::backdrop{}

::placeholder{} /*задается стилевое оформление подсказывающего текста, созданного атрибутом placeholder;*/

::selection{} /*Применяет стиль к выделенному пользователем тексту*/

																			/*Селекторы*/

* /*Универсальный*/																			
A B{} /*(Вложенный), при этом можно вкладывать много: div div ul li {...}.*/
E>F{} /*(Дочерний)Стиль применяется к элементу F только когда он является дочерним для E*/

E+F{} /*(Соседний/сестринский) Стиль применится к элементу F, если F идет сразу после E*/
E~F{} /*(Родственный) Стиль применится к F, если F имеет общего родителя с E*/
	
/*Установление стиля элемента, если задан его атрибут. Значение в данном случае не важно*/
[атрибут]{}(ко всем тегам с данным значением атрибута)
E[атрибут]{}(только к определенным селекторам)

/*Установление стиля элемента в том случае, если задано определенное значение атрибута*/
[атрибут="значение"]{}(ко всем тегам с данным значением атрибута) 
E[атрибут="значение"]{}(только к определенным селекторам)

/*Установление стиля для элемента в том случае, если значение атрибута начинается с указанного текста*/
[атрибут^="значение"]{}(ко всем тегам с данным значением атрибута)
E[атрибут^="значение"]{}(только к определенным селекторам)

/*Установление стиля для элемента в том случае, если значение атрибута оканчивается указанным текстом*/
[атрибут$="значение"]{}(ко всем тегам с данным значением атрибута)
E[атрибут$="значение"]{}(только к определенным селекторам)

/*Установление стиля для элемента в том случае, если значение атрибута cодержит указанный текст*/
[атрибут*="значение"]{}(ко всем тегам с данным значением атрибута)
E[атрибут*="значение"]{}(только к определенным селекторам)

/*Установление стиля при наличии в списке значений атрибута указанного значения*/
[атрибут~="значение"]{}(ко всем тегам с данным значением атрибута)
E[атрибут~="значение"]{}(только к определенным селекторам)

/*Установление стиля для элемента в том случае, если атрибут начинается с указанного значения, после которого идет дефис*/
[атрибут|="значение"]{}(ко всем тегам с данным значением атрибута)
E[атрибут|="значение"]{}(только к определенным селекторам)